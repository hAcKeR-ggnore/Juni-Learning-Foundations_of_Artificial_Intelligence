# main.py

class Node:
  def __init__(self, n):
    self.node = n
    self.neighbours = []
  def add_neighbour(self, x):
    self.neighbours.append(x)
  def __str__(self):
    if len(self.neighbours) > 2:
      temp = ", ".join(map(str, self.neighbours[0:len(self.neighbours)-1]))
      return str("Node(s): " + str(self.node)) + str("\nNeighbours/Edges: " + temp + ", and " + str(self.neighbours[len(self.neighbours)-1]))
    elif len(self.neighbours) == 2:
      temp = (str(self.neighbours[0]))
      return str("Node(s): " + str(self.node)) + str("\nNeighbours/Edges: "  + temp + " and " + str(self.neighbours[len(self.neighbours)-1]))
    elif len(self.neighbours) == 1:
      return str("Node(s): " + str(self.node)) + str("\nNeighbours/Edges: " + str(self.neighbours[0]))
    else:
      return str("Node(s): " + str(self.node) + str("\nNeighbours/Edges: None"))

class Graph:
  def __init__(self):
    self.graph = {}
  def add_node(self, userNode):
    self.graph[userNode.node] = userNode
  def add_edge(self, node1, node2):
    if node1.node in self.graph and node2.node in self.graph:
      node1.add_neighbour(node2)
      node2.add_neighbour(node1)
    else:
      print("One of your nodes is not inside the graph.")
  def __str__(self):
    s = ""
    for i in self.graph:
      s += str(self.graph[i].__str__()) + "\n\n"
    return s
  def bfs(self, startingNode):
    visited = {startingNode}
    stack = [startingNode]
    printList = []
    while len(stack) != 0:
      z = stack.pop(0)
      printList.append(z.node)
      for i in z.neighbours:
        if i not in visited:
          visited.add(i)
          stack.append(i)
    return print(*printList)
    
g = Graph()

# construct graph
a = Node("a")
b = Node("b")
c = Node("c")
d = Node("d")
e = Node("e")

g.add_node(a)
g.add_node(b)
g.add_node(c)
g.add_node(d)
g.add_node(e)

g.add_edge(a, b)
g.add_edge(a, c)
g.add_edge(b, d)
g.add_edge(b, e)

# run DFS iteratively
# expected output: a c b e d
g.bfs(a)
