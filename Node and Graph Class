# main.py

class Node:
  def __init__(self, n):
    self.node = n
    self.neighbours = []
  def add_neighbour(self, x):
    self.neighbours.append(x)
  def __str__(self):
    if len(self.neighbours) > 2:
      temp = ", ".join(map(str, self.neighbours[0:len(self.neighbours)-1]))
      return str("Node(s): " + str(self.node)) + str("\nNeighbours/Edges: " + temp + ", and " + str(self.neighbours[len(self.neighbours)-1]))
    elif len(self.neighbours) == 2:
      temp = (str(self.neighbours[0]))
      return str("Node(s): " + str(self.node)) + str("\nNeighbours/Edges: "  + temp + " and " + str(self.neighbours[len(self.neighbours)-1]))
    elif len(self.neighbours) == 1:
      return str("Node(s): " + str(self.node)) + str("\nNeighbours/Edges: " + str(self.neighbours[0]))
    else:
      return str("Node(s): " + str(self.node) + str("\nNeighbours/Edges: None"))
      
"""

nodex = Node("Starless")
nodex.add_neighbour("Bible")
nodex.add_neighbour("Discipline")
nodex.add_neighbour("Black")
print(nodex)

"""

class Graph:
  def __init__(self):
    self.graph = {}
  def add_node(self, userNode):
    self.graph[userNode.node] = userNode
  def add_edge(self, node1, node2):
    if node1 in self.graph and node2 in self.graph:
      node1.add_neighbour(node2)
      node2.add_neighbour(node1)
    else:
      print("One of your nodes is not inside the graph.")
  def __str__(self):
    s = ""
    for i in self.graph:
      s += str(self.graph[i].__str__()) + "\n\n"
    return s

nodex = Node("A")
nodey = Node("B")
nodez = Node("C")
node1 = Node("D")
holder = [nodex, nodey, nodez, node1]
graph = Graph()
for i in holder:
  graph.add_node(i)
print(graph)
